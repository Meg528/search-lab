"use strict";(self.webpackChunkswiftui_realm_app=self.webpackChunkswiftui_realm_app||[]).push([[3959],{4137:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>g});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(r),h=a,g=u["".concat(l,".").concat(h)]||u[h]||d[h]||o;return r?n.createElement(g,i(i({ref:t},c),{},{components:r})):n.createElement(g,i({ref:t},c))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},5756:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var n=r(7462),a=(r(7294),r(4137));const o={},i="Add full-text search to your application",s={unversionedId:"add-to-app/add-to-app",id:"add-to-app/add-to-app",title:"Add full-text search to your application",description:"So far, you've seen how to use the search indexes in the aggregation pipeline builder, or in Compass. But what if you want to use the search index in your application?",source:"@site/docs/4-add-to-app/1-add-to-app.mdx",sourceDirName:"4-add-to-app",slug:"/add-to-app/add-to-app",permalink:"/search-lab/docs/add-to-app/add-to-app",draft:!1,editUrl:"https://github.com/mongodb-developer/search-lab/blob/main/docs/4-add-to-app/1-add-to-app.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Implementing Atlas Search",permalink:"/search-lab/docs/category/implementing-atlas-search"},next:{title:"Search Operators",permalink:"/search-lab/docs/category/search-operators"}},l={},p=[{value:"Using aggregation pipelines in Node.js",id:"using-aggregation-pipelines-in-nodejs",level:2},{value:"Adding search to the library app",id:"adding-search-to-the-library-app",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"add-full-text-search-to-your-application"},"Add full-text search to your application"),(0,a.kt)("p",null,"So far, you've seen how to use the search indexes in the aggregation pipeline builder, or in Compass. But what if you want to use the search index in your application?"),(0,a.kt)("p",null,"To do so, you will need to add some code to your application."),(0,a.kt)("h2",{id:"using-aggregation-pipelines-in-nodejs"},"Using aggregation pipelines in Node.js"),(0,a.kt)("p",null,"To use the aggregation pipeline in Node.js, you will need to use the ",(0,a.kt)("inlineCode",{parentName:"p"},"aggregate")," method on the collection object. This method takes an array of stages as an argument, and returns a cursor. You can then use the cursor to iterate over the results, or use the ",(0,a.kt)("inlineCode",{parentName:"p"},"toArray")," method to get the results in an array."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const documents = await collection.aggregate(aggregationPipelines).toArray();\n")),(0,a.kt)("p",null,"You now know everything you need to add full-text search capabilities to your application."),(0,a.kt)("h2",{id:"adding-search-to-the-library-app"},"Adding search to the library app"),(0,a.kt)("p",null,"Open up the code from the server file ",(0,a.kt)("inlineCode",{parentName:"p"},"server/controllers/books.ts"),". In there, look for the ",(0,a.kt)("inlineCode",{parentName:"p"},"searchBooks")," function."),(0,a.kt)("p",null,"Right now, it uses a regular expression to query the database."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'public async searchBooks(query: string): Promise<Book[]> {\n  const books = await collections?.books?.find({ title: {$regex: new RegExp(query, "i")} }).toArray();\n  return books;\n}\n')),(0,a.kt)("p",null,"While this code works to a certain extent, it is less than optimal. As the dataset grows, the performance of this query will degrade because it will have to scan the entire collection. You cannot query the index with a regular expression. Furthermore, the query only matches on the title, and only for the exact sequence of characters."),(0,a.kt)("p",null,"Change this code to use the search index instead. You will need to use the ",(0,a.kt)("inlineCode",{parentName:"p"},"$search")," stage in the aggregation pipeline. Have your search cover the title, the author name, and the genres array."),(0,a.kt)("p",null,"This code will go in the ",(0,a.kt)("inlineCode",{parentName:"p"},"server/src/controllers/books.ts")," file, in the ",(0,a.kt)("inlineCode",{parentName:"p"},"searchBooks")," function."),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Click here to see the answer"),(0,a.kt)("div",null,(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"public async searchBooks(query: string): Promise<Book[]> {\n  const aggregationPipeline = [\n      {\n          $search: {\n              index: 'fulltextsearch',\n              text: {\n                  query,\n                  path: ['title', 'authors.name', 'genres']\n              }\n          }\n      }\n  ];\n  const books = await collections?.books?.aggregate(aggregationPipeline).toArray() as Book[];\n  return books;\n}\n")))),(0,a.kt)("p",null,"Play around the application, and look at what are the results you're getting. You should see that the results are more relevant than before."))}d.isMDXComponent=!0}}]);