"use strict";(self.webpackChunkswiftui_realm_app=self.webpackChunkswiftui_realm_app||[]).push([[249],{4137:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>m});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function c(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=n.createContext({}),l=function(e){var r=n.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):c(c({},r),e)),t},p=function(e){var r=l(e.components);return n.createElement(i.Provider,{value:r},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},h=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(t),h=o,m=u["".concat(i,".").concat(h)]||u[h]||d[h]||a;return t?n.createElement(m,c(c({ref:r},p),{},{components:t})):n.createElement(m,c({ref:r},p))}));function m(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,c=new Array(a);c[0]=h;var s={};for(var i in r)hasOwnProperty.call(r,i)&&(s[i]=r[i]);s.originalType=e,s[u]="string"==typeof e?e:o,c[1]=s;for(var l=2;l<a;l++)c[l]=t[l];return n.createElement.apply(null,c)}return n.createElement.apply(null,t)}h.displayName="MDXCreateElement"},1585:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var n=t(7462),o=(t(7294),t(4137));const a={},c="Scoring",s={unversionedId:"search-operators/scoring",id:"search-operators/scoring",title:"Scoring",description:"You might have noticed that most of the operators have a score property, which we haven't really talked about so far.",source:"@site/docs/5-search-operators/06-scoring.mdx",sourceDirName:"5-search-operators",slug:"/search-operators/scoring",permalink:"/search-lab/docs/search-operators/scoring",draft:!1,editUrl:"https://github.com/mongodb-developer/search-lab/blob/main/docs/5-search-operators/06-scoring.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"The range operator",permalink:"/search-lab/docs/search-operators/range"},next:{title:"Score modifiers",permalink:"/search-lab/docs/search-operators/score-modifier"}},i={},l=[],p={toc:l},u="wrapper";function d(e){let{components:r,...t}=e;return(0,o.kt)(u,(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"scoring"},"Scoring"),(0,o.kt)("p",null,"You might have noticed that most of the operators have a ",(0,o.kt)("inlineCode",{parentName:"p"},"score")," property, which we haven't really talked about so far."),(0,o.kt)("p",null,"Before we jump into scoring, it is important to understand what the document score is. Every document returned by an Atlas Search query is assigned a score based on relevance, and the documents included in a result set are returned in order from highest score to lowest."),(0,o.kt)("p",null,"Some factors that can influence the score include:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The position of the search term in the document,"),(0,o.kt)("li",{parentName:"ul"},"The frequency of occurrence of the search term in the document,"),(0,o.kt)("li",{parentName:"ul"},"The type of operator the query uses,"),(0,o.kt)("li",{parentName:"ul"},"The type of analyzer the query uses.")),(0,o.kt)("p",null,"To see the scores, you will need to project a new metadata field, using ",(0,o.kt)("inlineCode",{parentName:"p"},"$meta"),". To see the document scores in a simple phrase search for ",(0,o.kt)("em",{parentName:"p"},"Alice in Wonderland"),", try the followin aggregation pipeline."),(0,o.kt)("p",null,"You can run this in the aggregation builders from the Atlas UI or in Compass."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'[\n  {\n    $search: {\n      index: "fulltextsearch",\n      phrase: {\n        query: "Alice in Wonderland",\n        path: "title",\n      },\n    },\n  },\n  {\n    $project: {\n      title: 1,\n      authors: 1,\n      pages: 1,\n      year: 1,\n      score: {\n        $meta: "searchScore",\n      },\n    },\n  },\n]\n')),(0,o.kt)("p",null,"Your first result should look be"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'{\n  "_id": "0831702877",\n  "title": "Alice in Wonderland",\n  "authors": [\n    {\n      "_id": "64cc2db4830ba29148da7bbc",\n      "name": "Walt Disney Productions"\n    },\n    {\n      "_id": "64cc2db4830ba29148da8db5",\n      "name": "Mouse Works"\n    }\n  ],\n  "pages": 95,\n  "year": 1997,\n  "score": 10.441896438598633\n}\n')),(0,o.kt)("p",null,"It got scored much higher than the next one because it's an exact match."))}d.isMDXComponent=!0}}]);