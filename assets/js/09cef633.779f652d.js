"use strict";(self.webpackChunksearch_party_lab=self.webpackChunksearch_party_lab||[]).push([[7496],{7611:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>h});var t=n(5893),s=n(1151);const r={},a="\ud83d\udc50 Exercises",i={id:"search-operators/exercises",title:"\ud83d\udc50 Exercises",description:"Time to get some practice with the concepts you've learned! Try to answer the following questions to the best of your ability. Feel free to reference the slides and notes you've taken during the lesson.",source:"@site/docs/5-search-operators/09-exercises.mdx",sourceDirName:"5-search-operators",slug:"/search-operators/exercises",permalink:"/search-lab/docs/search-operators/exercises",draft:!1,unlisted:!1,editUrl:"https://github.com/mongodb-developer/search-lab/blob/main/docs/5-search-operators/09-exercises.mdx",tags:[],version:"current",sidebarPosition:9,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udcd8 Mixing and matching",permalink:"/search-lab/docs/search-operators/mix-and-match"},next:{title:"\ud83e\uddb8 Advanced Exercises",permalink:"/search-lab/docs/search-operators/advanced-exercises"}},c={},h=[{value:"Add fuzzy search",id:"add-fuzzy-search",level:2},{value:"Promote the books of the month",id:"promote-the-books-of-the-month",level:2},{value:"Promote shorter books",id:"promote-shorter-books",level:2}];function l(e){const o={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...e.components},{Details:n}=o;return n||function(e,o){throw new Error("Expected "+(o?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.h1,{id:"-exercises",children:"\ud83d\udc50 Exercises"}),"\n",(0,t.jsx)(o.p,{children:"Time to get some practice with the concepts you've learned! Try to answer the following questions to the best of your ability. Feel free to reference the slides and notes you've taken during the lesson."}),"\n",(0,t.jsx)(o.p,{children:"No cheating! Try to only look at the answer after you gave it a try."}),"\n",(0,t.jsx)(o.h2,{id:"add-fuzzy-search",children:"Add fuzzy search"}),"\n",(0,t.jsx)(o.p,{children:"Try adding fuzzy search to your application so it can find the correct books, even if the user makes a typo."}),"\n",(0,t.jsx)(o.admonition,{type:"tip",children:(0,t.jsxs)(o.p,{children:["Remember the fuzzy parameter of the ",(0,t.jsx)(o.a,{href:"https://www.mongodb.com/docs/atlas/atlas-search/text/#std-label-text-ref",children:(0,t.jsx)(o.code,{children:"text"})})," operator? This is where you'd use it."]})}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"Answer"}),(0,t.jsx)("div",{children:(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-js",children:"public async searchBooks(query: string): Promise<Book[]> {\n  const aggregationPipeline = [\n      {\n          $search: {\n              index: 'fulltextsearch',\n              text: {\n                  query,\n                  path: ['title', 'authors.name', 'genres'],\n                  fuzzy: {\n                    maxEdits: 2\n                  }\n              }\n          }\n      }\n  ];\n  const books = await collections?.books?.aggregate(aggregationPipeline).toArray() as Book[];\n  return books;\n}\n"})})})]}),"\n",(0,t.jsx)(o.h2,{id:"promote-the-books-of-the-month",children:"Promote the books of the month"}),"\n",(0,t.jsx)(o.p,{children:"The marketing team has decided that they want to promote the books of the month. They want to show these books first in the search results. How would you do this?"}),"\n",(0,t.jsx)(o.admonition,{type:"tip",children:(0,t.jsxs)(o.p,{children:["You'll need to use the ",(0,t.jsx)(o.a,{href:"https://www.mongodb.com/docs/atlas/atlas-search/compound/#std-label-compound-ref",children:(0,t.jsx)(o.code,{children:"compound"})})," operator with multiple operators here. There is a ",(0,t.jsx)(o.code,{children:"bookOfTheMonth"})," boolean field on some of the books that you could use."]})}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"Answer"}),(0,t.jsx)("div",{children:(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-js",children:'public async searchBooks(query: string): Promise<Book[]> {\n    const aggregationPipeline = [\n        {\n          $search: {\n            "index": "fulltextsearch",\n            "compound": {\n              "must": [\n                {\n                  "text": {\n                    query,\n                    "path": ["title", "author.name", "genres"],\n                    fuzzy: {\n                      maxEdits: 2\n                    }\n                  }\n                }\n              ],\n              "should": [\n                {\n                  "equals": {\n                    "value": true,\n                    "path": "bookOfTheMonth",\n                    "score": {\n                      "boost": { value: 10 }\n                    }\n                  }\n                }\n              ]\n            }\n          }\n        }\n      ];\n    const books = await collections?.books?.aggregate(aggregationPipeline).toArray() as Book[];\n    return books;\n}\n'})})})]}),"\n",(0,t.jsx)(o.h2,{id:"promote-shorter-books",children:"Promote shorter books"}),"\n",(0,t.jsx)(o.p,{children:"You've noticed that readers tend to prefer shorter books. Without using a large score boost, try to promote shorter books in the search results."}),"\n",(0,t.jsx)(o.admonition,{type:"tip",children:(0,t.jsxs)(o.p,{children:["Even without a score adjuster, the ",(0,t.jsx)(o.a,{href:"https://www.mongodb.com/docs/atlas/atlas-search/compound/#mongodb-data-should",children:(0,t.jsx)(o.code,{children:"should"})})," operator will still boost the score of the documents that match it."]})}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"Answer"}),(0,t.jsx)("div",{children:(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-js",children:'public async searchBooks(query: string): Promise<Book[]> {\n    const aggregationPipeline = [\n        {\n          $search: {\n            "index": "fulltextsearch",\n            "compound": {\n              "must": [\n                {\n                  "text": {\n                    query,\n                    "path": ["title", "author.name", "genres"],\n                    fuzzy: {\n                      maxEdits: 2\n                    }\n                  }\n                }\n              ],\n              "should": [\n                {\n                  "equals": {\n                    "value": true,\n                    "path": "bookOfTheMonth",\n                    "score": {\n                      "boost": { value: 10 }\n                    }\n                  }\n                },\n                {\n                  "range": {\n                    path: "pages",\n                    lt: 80\n                  }\n                }\n              ]\n            }\n          }\n        }\n      ];\n    const books = await collections?.books?.aggregate(aggregationPipeline).toArray() as Book[];\n    return books;\n}\n'})})})]})]})}function d(e={}){const{wrapper:o}={...(0,s.a)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},1151:(e,o,n)=>{n.d(o,{Z:()=>i,a:()=>a});var t=n(7294);const s={},r=t.createContext(s);function a(e){const o=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function i(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(r.Provider,{value:o},e.children)}}}]);